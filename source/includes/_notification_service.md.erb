 ## Handling Mobile Push Notifications

 ```swift
#  The first step is to make sure that autoSendPushToken = true during SDK initialization
#  it's a default value.
#  NotificationService  object is initializing with SimplePersonalizationSDK
#  This is done in the didFinishLaunchingWithOptions method of the AppDelegate class
#  NotificationService checks the value of autoSendPushToken.
#  If autoSendPushToken = true, it checks the date of the last token sent.
#  If the last sent date is missing (nil), the token will be sent to the server and the date will be saved.
#  If more than a week has passed since the last send, the token will be sent and the date will be updated.
#  If less than a week has passed, the token will not be sent.
#  If autoSendPushToken value is false NotificationService won`t send the token to the server

@UIApplicationMain

class AppDelegate: UIResponder, UIApplicationDelegate {
  var window: UIWindow?
  var sdk: PersonalizationSDK!
  var notificationService: NotificationServiceProtocol?

  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    sdk = createPersonalizationSDK(
      shopId: "SHOP_ID",
      stream: "ios",
      enableLogs: true
      ) { error in
         // Custom completionHandler
        }

      notificationService = NotificationService(sdk: sdk)
      return true
      }
  }

# During initialization NotificationService  will ask permission from the user to send notifications
# The initializeNotificationRegistrar method requests permissions and registers the device for remote notifications.

private func initializeNotificationRegistrar() {
  if autoSendPushToken {
    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { [weak self] granted, error in
      guard let self = self else { return }

    if granted {
       DispatchQueue.main.async {
        UIApplication.shared.registerForRemoteNotifications()
        }

    if let deviceToken = UserDefaults.standard.data(forKey: Constants.deviceToken) {
      let notificationRegistrar = NotificationRegistrar(sdk: self)
        notificationRegistrar.registerWithDeviceToken(deviceToken: deviceToken)
          }

    } else if let error = error {
}

# The handleAutoSendPushToken method checks for the presence of a token and initiates its sending.

private func handleAutoSendPushToken() {
  if let deviceToken = UserDefaults.standard.data(forKey: Constants.deviceToken) {
    let notificationRegistrar = NotificationRegistrar(sdk: self)
    notificationRegistrar.registerWithDeviceToken(deviceToken: deviceToken)
  }
}
```



```kotlin
// To provide a comprehensive answer and cover all methods for handling mobile push notifications from your code, here's an extended response:

// User received on mobile push**:
// The `notificationReceived` method in the `SDK` class handles the event of receiving a push notification on a mobile device. This method is called upon receiving a notification, and it sends an asynchronous request to track this event.

/**
 * Handles the event of receiving a push notification on a mobile device.
 * @param data Data from the notification
 */

fun notificationReceived(data: Map<String, String>) {
    val params = JSONObject()
    try {
        val type = data["type"]
        if (type != null) {
            params.put("type", type)
        }
        val id = data["id"]
        if (id != null) {
            params.put("code", id)
        }
        if (params.length() > 0) {
            sendAsync("track/received", params)
        }
    } catch (e: JSONException) {
        Log.e(TAG, e.message, e)
    }
}

/**
 * Handles the event of a user clicking on a push notification.
 * @param extras Additional data from the notification
 */

fun notificationClicked(extras: Bundle?) {
    val type = extras?.getString(NOTIFICATION_TYPE, null)
    val code = extras?.getString(NOTIFICATION_ID, null)
    if (type != null && code != null) {
        val params = JSONObject()
        try {
            params.put("type", type)
            params.put("code", code)
            sendAsync("track/clicked", params)
            source.update(type, code, prefs())
        } catch (e: JSONException) {
            Log.e(TAG, e.message, e)
        }
    }
}
```
