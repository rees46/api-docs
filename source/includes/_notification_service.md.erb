 ## Handling Mobile Push Notifications

 ```swift
     #  The first step is to make sure that `autoSendPushToken = true` during SDK initialization
     #  it's a default value.
     # `NotificationService`  object is initializing with `SimplePersonalizationSDK`
     # `NotificationService` will check `autoSendPushToken ` value. If true - the last sending date check.
     #  Check results: nil - token will be sent to the server and the date will be saved.
     #  More than a week - the token will be sent and the token sending date will be renewed.
     #  Less than a week - token won`t be sent.
     #  If `autoSendPushToken` value is false NotificationService won`t send the token to the server

     @UIApplicationMain

     class AppDelegate: UIResponder, UIApplicationDelegate {
         var window: UIWindow?

         var sdk: PersonalizationSDK!
         var notificationService: NotificationServiceProtocol?

         func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
             sdk = createPersonalizationSDK(shopId: "SHOP_ID", enableLogs: true, { error in
             # Custom completionHandler
             })

             # Create instance of NotificationService with pre-created sdk
             notificationService = NotificationService(sdk: sdk)
                 }
             }

     # During initialization `NotificationService ` will ask permission from the user to send notifications
     # - UIApplication.shared.registerForRemoteNotifications()
     # The client will have to sign protocols - UNUserNotificationCenterDelegate and implement
     # the application(didRegisterForRemoteNotificationsWithDeviceToken) method
     # and call notificationService.didRegisterForRemoteNotificationsWithDeviceToken(deviceToken: Data)

     extension AppDelegate: UNUserNotificationCenterDelegate {
         func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
         # Additional custom code
     notificationService?.didRegisterForRemoteNotificationsWithDeviceToken(deviceToken: deviceToken)
     }
```



```kotlin
// To provide a comprehensive answer and cover all methods for handling mobile push notifications from your code, here's an extended response:

// User received on mobile push**:
// The `notificationReceived` method in the `SDK` class handles the event of receiving a push notification on a mobile device. This method is called upon receiving a notification, and it sends an asynchronous request to track this event.

/**
 * Handles the event of receiving a push notification on a mobile device.
 * @param data Data from the notification
 */

fun notificationReceived(data: Map<String, String>) {
    val params = JSONObject()
    try {
        val type = data["type"]
        if (type != null) {
            params.put("type", type)
        }
        val id = data["id"]
        if (id != null) {
            params.put("code", id)
        }
        if (params.length() > 0) {
            sendAsync("track/received", params)
        }
    } catch (e: JSONException) {
        Log.e(TAG, e.message, e)
    }
}

/**
 * Handles the event of a user clicking on a push notification.
 * @param extras Additional data from the notification
 */

fun notificationClicked(extras: Bundle?) {
    val type = extras?.getString(NOTIFICATION_TYPE, null)
    val code = extras?.getString(NOTIFICATION_ID, null)
    if (type != null && code != null) {
        val params = JSONObject()
        try {
            params.put("type", type)
            params.put("code", code)
            sendAsync("track/clicked", params)
            source.update(type, code, prefs())
        } catch (e: JSONException) {
            Log.e(TAG, e.message, e)
        }
    }
}
```
