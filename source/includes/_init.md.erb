# Initialize

## Setup

```shell
# No setup is needed
```

```javascript
// Put this code in the <head> section of web page.
(function(r){
    window.<%= config[:js_sdk_name] %>=window.<%= config[:js_sdk_name] %>||function(){(window.<%= config[:js_sdk_name] %>.q=window.<%= config[:js_sdk_name] %>.q||[]).push(arguments)};
    var c="https://cdn.<%= config[:js_sdk_name] %>.com",v="/v3.js",s={link:[{href:c,rel:"dns-prefetch"},{href:c,rel:"preconnect"},{href:c+v,rel:"preload",as:"script"}],script:[{src:c+v,async:""}]};
    Object.keys(s).forEach(function(c){s[c].forEach(function(d){var e=document.createElement(c),a;for(a in d)e.setAttribute(a,d[a]);document.head.appendChild(e)})});
})();
```

```swift
// Cocoapods: just put this line in your Podfile
pod <%= config[:ios_sdk_package_name] %>

// Swift package manager (XCode >= 11)
// 1. Click File menu
// 2. Swift Packages
// 3. Add Package Dependency...
// 4. Specify the git URL for SDK repo: <%= config[:ios_sdk_repo] %>
```

```java
// 1. Add to dependencies:
implementation 'com.personalizatio:<%= config[:android_sdk_package_code] %>-sdk:1.2.8'

// 2. Append to repositories:
repositories {
    maven {
        url  "https://dl.bintray.com/pnixx/maven"
    }
}

// 3. Append to your project build.gradle
buildscript {
	dependencies {
		...
		classpath 'com.google.gms:google-services:4.3.2'
	}
}

// 4. Append to your app module build.gradle after line apply
//    plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

// 5. Create your app in the Firebase console
//    and copy file google-services.json to your app root path.
//    Sync gradle now.
```

```jsx
// Add required packages:
yarn add <%= config[:rn_sdk_package_code] %>/rn-sdk
yarn add @react-native-async-storage/async-storage
yarn add react-native-device-info

// For push notifications also add:
yarn add react-native-push-notification
yarn add @react-native-firebase/app
yarn add @react-native-firebase/messaging
```

```jsx
// On application launch initialize the SDK:
import <%= config[:rn_sdk_package_name] %> from '<%= config[:rn_sdk_package_code] %>/rn-sdk';
...
const sdk = new <%= config[:rn_sdk_package_name] %>("YOUR_SHOP_ID", "Stream");

// Initialization is async, so you have a method to test, if SDK is initialized or not:
sdk.isInit(); // returns true/false
```

```jsx
// To collect push tokens, you have to make some adjustments to the app:

// ** For iOS:

// Open your /ios/{projectName}/AppDelegate.m file, and add the following: At the top of the file, import the Firebase SDK:
#import <Firebase.h>

// Open a terminal window and navigate to the location of the Xcode project for your app

cd ios/
pod install
```

```jsx
// ** For Android

// In your android/build.gradle

buildscript {
    dependencies {
        ...
        //Add this \/
        classpath 'com.google.gms:google-services:4.3.4'
    }
}

// In your android/app/build.gradle add
apply plugin: 'com.google.gms.google-services'
```



Before using API you have to setup SDK.

## Start session

```shell
curl https://<%= config[:api_endpoint] %>/init?did=DEVICE_ID&shop_id=SHOP_ID&v=3&seance=SEANCE_ID&referrer=REF_URL
```

```javascript
// Put this line right after setup code
<%= config[:js_sdk_name] %>('init', 'SHOP_ID', 'STREAM', success, failure);
```

```swift
import <%= config[:ios_sdk_package_name] %>
var sdk = createPersonalizationSDK(shopId: "SHOP_ID", stream: "ios")
```

```java
// 1. Add code to your application
public class SampleApplication extends Application {
	public void onCreate() {
		super.onCreate();

		//Initialize
		<%= config[:android_sdk_package_name] %>.initialize(getApplicationContext(), SHOP_ID);

		//Notification callback
		<%= config[:android_sdk_package_name] %>.setOnMessageListener(new MessagingService.OnMessageListener() {
			@Override
			public void onMessage(Map<String, String> data) {

				//----->
				//Show your custom notification
				//----->

			}
		});
	}
}

// 2. For On-Premise integration need use initialize with custom api domain:
<%= config[:android_sdk_package_name] %>.initialize(getApplicationContext(), SHOP_ID, API_DOMAIN);

// 3. Check AndroidManifest.xml and add android:name=".SampleApplication" to application item.
<application
		...
		android:name=".SampleApplication"
```

`GET https://<%= config[:api_endpoint] %>/init`

Before using SDK or API you have to initialize SDK. Initialization takes current user identifier and requests API for project settings and this user preferences.

Depending on platform there are different requirements when to run init:

- cURL: on every page render
- Web: on every opened page (even for single-page applications)
- iOS: on each application launch
- Android: on each application launch

If you don't have device identifier (first launch on new device), you have to request API's `init` method to generate new one. Store this identifier (it's named `did`) in local storage of mobile application or in database: you'll need it for the future requests to API.


### Query Parameters

Parameter | Required | Description
--------- | ------- | -----------
shop_id | true | Your API key
did | false | Is mandatory if you have it. Request without `did` will generate new one in our DB. Use it as device ID for future requests.
v | true | Version. Just use `3` as value.
seance | true | User's temporary identifier for the current session. Must be regenerated every time user starts new session. Unique string. This parameter is handled automatically in all SDKs.
referrer | false | Referrer page URL for web integration.
tz | false | Timezone offset (integer, positive or negative number as difference with GMT).
stream | false | Data stream code. Alphanumeric string (letters, numbers only). Max length: 16. Default: null (means "web"). Can be "ios", "android" or any other string. Used to distinguish between mobile apps, web and other events sources.

