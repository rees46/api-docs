# Loyalty program

Service provides endpoints for loyalty program management.

## Join loyalty program

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id": "...",
    "shop_secret": "...",
    "phone": "...",
    "email": "...",
    "first_name": "...",
    "last_name": "...",
    "gender": "...",
    "birthday": "..."
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request POST \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/loyalty/members/join
```

```javascript
// S2S only
```

```swift
// S2S only
```

```java
// S2S only
```

```kotlin
// S2S only
```

```jsx
// S2S only
```

> The above command returns JSON structured like this:

```json
{
  "success": true,
  "payload": {
    "message": "Member is registered successfully",
    "identifier": "..."
  }
}
```

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/loyalty/members/join`

Method to register a user as a member of loyalty program. Server-to-server integration method only.

### Query Parameters

| Parameter   | Required | Description                               |
|-------------|----------|-------------------------------------------|
| shop_id     | true     | Your API key                              |
| shop_secret | true     | Your API secret key                       |
| email       | true     | User's email                              |
| phone*      | true     | User's phone number. Required.            |
| first_name  | optional | Customer's first name                     |
| last_name   | optional | Customer's last name                      |
| gender      | optional | Customer's gender: `m` or `f`             |
| birthday    | optional | Customer's birthday (format: `YYYY-MM-DD` |




## Estimate discounts

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id":        "...",
    "shop_secret":    "...",
    "identifier":     "...",
    "payment_type":   "...",
    "charge_bonuses": true,
    "cart_items": [
      {"product_id": "...", "price": 1000, "quantity": 4},
      {"product_id": "...", "price": 2000, "quantity": 1}
    ]
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request POST \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/loyalty/checkout/estimate
```

```javascript
// S2S only
```
```swift
// S2S only
```
```java
// S2S only
```
```kotlin
// S2S only
```
```jsx
// S2S only
```

> The above command returns JSON structured like this:

```json
{
  "success": true,
  "payload": {
    "order_id": null,
    "identifier": "...",
    "payment_type": "...",
    "order_total": 6000,
    "order_discount": 1000,
    "order_to_pay": 5000,
    "order_bonuses_to_charge": 500,
    "items": [
      {
        "product_id": "...",
        "quantity": 4,
        "price": 1000,
        "total": 4000,
        "discountable": true,
        "bonusable": true,
        "paid_with_offers": 0,
        "paid_with_discounts": 500,
        "paid_with_bonuses": 500,
        "bonuses_used": 500,
        "bonuses_used_per_product": 125,
        "total_after_discounts": 3500,
      },
      ...
    ]
  }
}
```

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/loyalty/checkout/estimate`

Method estimates discounts and bonuses usage for the shopping cart.

This is the first operation in the checkout process. POS or website sends this request with the client's shopping cart and receives calculated order value with discounts. This operation doesn't charge for bonuses and can be requested several times safely.

If `charge_bonuses` is missing or `false`, only offers and discounts will be applied. Bonuses will not be calculated.

When clients proceed to the payment step, execute the next method `apply` to charge for bonuses and get the final payment value.





## Apply discounts

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id":         "...",
    "shop_secret":     "...",
    "order_id":        "...",
    "identifier":      "...",
    "payment_type":    "...",
    "payment_type":    "...",
    "charge_bonuses":  true,
    "cart_items": [
      {"product_id": "...", "price": 1000, "quantity": 4},
      {"product_id": "...", "price": 2000, "quantity": 1}
    ]
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request POST \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/loyalty/checkout/apply
```

```javascript
// S2S only
```
```swift
// S2S only
```
```java
// S2S only
```
```kotlin
// S2S only
```
```jsx
// S2S only
```

> The above command returns JSON structured like this:

```json
{
  "success": true,
  "payload": {
    "order_id": "...",
    "identifier": "...",
    "payment_type": "...",
    "order_total": 6000,
    "order_discount": 1000,
    "order_to_pay": 5000,
    "order_bonuses_to_charge": 500,
    "items": [
      {
        "product_id": "...",
        "quantity": 4,
        "price": 1000,
        "total": 4000,
        "discountable": true,
        "bonusable": true,
        "paid_with_offers": 0,
        "paid_with_discounts": 500,
        "paid_with_bonuses": 500,
        "bonuses_used": 500,
        "bonuses_used_per_product": 125,
        "total_after_discounts": 3500,
      },
      ...
    ]
  }
}
```

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/loyalty/checkout/apply`

When clients proceed to the payment step, execute the this method to charge for bonuses and get the final payment value.

If `charge_bonuses` parameter is missing or `false`, only offers and discounts will be applied. Bonuses will not be calculated in the final order value and charged.

This method requires `order_id` parameter to apply bonuses and save results in our database.

This method actually charges a client for bonuses so it's not safe to execute it several times for the same `order_id` or `identifier`.

If client decided to not pay for the order, use "order status sync" operation to cancel the order and refund bonuses charged in this operation.







## Cancel order

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id":         "...",
    "shop_secret":     "...",
    "order_id":        "...",
    "identifier":      "...",
    "payment_type":    "...", // Optional
    "charge_bonuses":  true,
    "cart_items": [
      {"product_id": "...", "price": 1000, "quantity": 4},
      {"product_id": "...", "price": 2000, "quantity": 1}
    ]
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request POST \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/loyalty/checkout/cancel
```

```javascript
// S2S only
```
```swift
// S2S only
```
```java
// S2S only
```
```kotlin
// S2S only
```
```jsx
// S2S only
```

> The above command returns JSON structured like this:

```json
{
  "success": true,
  "payload": {
    "order_id": "...",
    "identifier": "..."
  }
}
```

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/loyalty/checkout/cancel`

If client failed to pay for order and don't plan to proceed, you have to cancel the transaction to refund bonuses used on `loyalty/checkout/apply` operation.

Just send the same payload to `loyalty/checkout/cancel` to refund bonuses.



## Order details

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id":         "...",
    "shop_secret":     "...",
    "order_id":        "..."
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request GET \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/loyalty/checkout/cancel
```

```javascript
// S2S only
```
```swift
// S2S only
```
```java
// S2S only
```
```kotlin
// S2S only
```
```jsx
// S2S only
```

> The above command returns JSON structured like this:

```json
{
  "success": true,
  "payload": {
    "order_id": "...",              // (string) Order ID
    "identifier": "...",            // (string) Loyalty member identifier
    "payment_type": "...",          // (string) Payment type
    "order_total": ...,             // (decimal) Order total value (initial)
    "order_discount": ...,          // (decimal) Order total discount
    "order_to_pay": ...,            // (decimal) Order total to pay after discounts
    "order_bonuses_to_charge": ..., // (integer) Total bonuses used in this order
    "items": [
      {
        "uniqid": "...",              // (string) Item ID
        "quantity": ...,              // (integer) Quantity
        "price": ...,                 // (decimal) Initial product price
        "total": ...,                 // (decimal) Total value of a position (price * quantity)
        "discountable": ...,          //(bool) Allowed for discounts
        "bonusable": ...,             // (bool) Allowed for bonuses
        "paid_with_offers": ...,      // (decimal) Paid with offers
        "paid_with_discounts": ...,   // (decimal) Paid with discounts
        "paid_with_bonuses": ...,     // (decimal) Paid with bonuses
        "bonuses_used": ...,          // (integer) Bonuses used for this position
        "bonuses_used_per_product": ..., // (integer) Bonuses used per 1 pcs of this product
        "total_after_discounts": ... // (decimal) To paid with money after all discounts
      },
      ...
    ],
  }
}
```

### HTTP Request

`GET https://<%= config[:api_endpoint] %>/loyalty/checkout/details`

Returns details of discounts and bonuses usage calculation of a previously created order.





## Get balance
> Request example

```shell
curl 'https://<%= config[:api_endpoint] %>/loyalty/basic/balance?shop_id=SHOP_ID&shop_secret=SHOP_SECRET&phone=PHONE&order_total=ORDER_TOTAL'
```

> The above command returns JSON structured like this:

```json
{
    "confirmed": 123,
    "pending": 456,
    "expiring": 789,
    "expire_in": "2022-12-12 23:59:59 UTC",
    "available_in_order": 100, // How many bonuses can be spent in this purchase
    "payable_amount": 50 // How much it will in currency if exchange rate is not 1:1
}
```

Method return current bonuses balance.

### HTTP Request

`GET https://<%= config[:api_endpoint] %>/loyalty/basic/balance`

### Query Parameters

| Parameter   | Required | Description                          |
|-------------|----------|--------------------------------------|
| shop_id     | true     | Your API key                         |
| shop_secret | true     | Your API secret key                  |
| email*      | true     | User's email                         |
| phone*      | true     | User's phone number                  |
| expire_in   | optional | Bonuses expiration date (DD-MM-YYYY) |
| order_total | optional | Order total                          |

<aside class="notice">
At least one of identifiers (marked by *) must present in request: email, phone. It's used to identify user.
</aside>


### API response

| Name                | Type     | Description                            |
|---------------------|----------|----------------------------------------|
| confirmed           | Int      | Available bonuses                      |
| pending             | Int      | Pending bonuses                        |
| expiring            | Int      | Bonuses that will be expired           |
| expire_in           | Datetime | Expiring period                        |
| available_in_order  | Int      | Available bonuses for use in the order |



## Reward bonuses for an activity

> Request example

```shell
curl --location --request POST 'https://<%= config[:api_endpoint] %>/loyalty/basic/event_bonus?phone=PHONE&shop_id=SHOP_ID&shop_secret=SHOP_SECRET&event=EVENT&amount=AMOUNT'
```

> The above command returns JSON structured like this:

```json
{
    "status": "success"
}
```

Method increase bonuses. This method is used to increase user bonuses that aren't related to an order. It can be any action, for example, registration in the mobile applications. Bonuses added by this method have activated status and can be used immediately.

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/loyalty/basic/event_bonus`

### Query Parameters

| Parameter   | Required | Description                                                                                                  |
|-------------|----------|--------------------------------------------------------------------------------------------------------------|
| shop_id     | true     | Your API key                                                                                                 |
| shop_secret | true     | Your API secret key                                                                                          |
| email       | true     | User's email                                                                                                 |
| phone*      | true     | User's phone number (loyalty program identifier)                                                             |
| event       | true     | A unique event code that's used once for a user to award bonuses for an action. For example, "registration". |
| amount      | true     | Bonuses amount                                                                                               |


### API response

| Name      | Type   | Description       |
|-----------|--------|-------------------|
| status    | String | Response status   |
