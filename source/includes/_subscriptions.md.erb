# Subscriptions

Service provides methods to manage user's subscriptions

## Manage subscriptions

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/subscriptions/manage`

### Subscribe user to mailings

```shell
curl -d "shop_id=SHOPID&shop_secret=SECRET&email=my@email.com&event=subscription&segment_id=SEGMENT_ID" \
https://<%= config[:api_endpoint] %>/subscriptions/manage
```

> The above command returns JSON structured like this:

```json
{'status':  'success'}
```

Parameter | Required | Description
--------- | ------- | -----------
shop_id | true | Your API key
shop_secret | true | Secret API key
email | true | User's email
event | true | Event to process: `subscription`
segment_id | false | Segment ID to put subscribed user


### Unsubscribe user from mailings

Use this method to unsubscribe user from all types of mailings:

```shell
curl -d "shop_id=SHOPID&shop_secret=SECRET&email=my@email.com&&event=unsubscription" \
https://<%= config[:api_endpoint] %>/subscriptions/manage
```

> The above command returns JSON structured like this:

```json
{'status':  'success'}
```

Parameter | Required | Description
--------- | ------- | -----------
shop_id | true | Your API key
shop_secret | true | Secret API key
email | true | User's email
event | true | Event to process: `unsubscription`


### Email is bounced

Use this method only for hard bounces. Don't use it for soft bounce, because it purges email from database forever.

```shell
curl -d "shop_id=SHOPID&shop_secret=SECRET&email=my@email.com&event=hardbounce" \
https://<%= config[:api_endpoint] %>/subscriptions/manage
```

> The above command returns JSON structured like this:

```json
{'status':  'success'}
```

Parameter | Required | Description
--------- | ------- | -----------
shop_id | true | Your API key
shop_secret | true | Secret API key
email | true | User's email
event | true | Event to process: `hardbounce`

### Email is complained

Use this method on FBL request (user marked email as spam):

```shell
curl -d "shop_id=SHOPID&shop_secret=SECRET&email=my@email.com&event=complaint" \
https://<%= config[:api_endpoint] %>/subscriptions/manage
```

> The above command returns JSON structured like this:

```json
{'status':  'success'}
```

Parameter | Required | Description
--------- | ------- | -----------
shop_id | true | Your API key
shop_secret | true | Secret API key
email | true | User's email
event | true | Event to process: `complaint`





## Check subscription status

```shell
curl https://<%= config[:api_endpoint] %>/subscriptions/check
```

```javascript
// No implementation. See CURL
```

```swift
// No implementation. See CURL
```

```java
// No implementation. See CURL
```

> Response example

```json
{
    "email_bulk": false,
    "email_chain": false,
    "email_transactional": false,
    "email_invalid": false,
    "email_blacklisted": false,
    "email_bounced": false,
    "email_suppressed": false,
    "web_push": false,
    "mobile_push": false,
    "sms_bulk": false,
    "sms_chain": false,
    "sms_transactional": false,
}
```


Checks email's subscription status.

Parameter | Type | Required | Description
--------- | ------- | -------  | -----------
shop_id | String | true | Your API key
email | String | true | User's email

Response flags:

Property | Type | Description
--------- | -------  | -----------
bulk | Boolean | Email is subscribed to bulk emails
chains | Boolean | Email is subscribed to chain messages / Drip campaigns
transactional | Boolean | Email is subscribed to transactional emails
invalid | Boolean | Email is invalid or disposal email
blacklisted | Boolean | Email is blacklisted (spam trap, hard bounce)
bounced | Boolean | Email is hard bounced
suppressed | Boolean | Email is suppressed due to complaint
