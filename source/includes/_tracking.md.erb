# Events tracking

You have to track all user's behavior to get real time statistics and user's segmentation.

The platform provides different kinds of events:

- pre-defined events for main reports and segmentation
- user defined events

Events can be tracked in default mode (user did something) and assisted mode (user did something with help of some platform's instruments: search, push, email, recommendations, etc).

To track assisted events, you need to user `recommendedBy` (or `recommended_by`, depending on SDK) params.

## Required params

All events require at least these parameters:

Parameter | Type | Required | Description
--------- | ------- | -------  | -----------
shop_id | String | true | Your API key
did | String | true | Device ID
seance | String | true | User's current session
event | String | true | Type of an event
stream | String | false | Data stream code. Alphanumeric string (letters, numbers only). Max length: 16. Default: null (means "web"). Can be "ios", "android" or any other string. Used to distinguish between mobile apps, web and other events sources


SDKs already handle these parameters out of the box.

## Source tracking

```shell
# No code implementation
```

```javascript
// It's done automatically. You don't have to do anything.
```

```swift
// Track launch from drip campaign (chain).
// Message ID and source will be provided in mobile push payload
sdk.trackSource(source: .chain, code: "MESSAGE_ID")
```

```java
// Pending implementation
```

For mobile apps you have to track all app launches, happened by drip campaigns, mailings and push notifications. It will allow to track campaigns efficiency properly.

## User viewed a product

```shell
#Full request without widget recommendation identifiers
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=view&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID&is_available[0]=PRODUCT_AVAIBILITY[0 or 1]'

#Full request without widget recommendation identifiers
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=view&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID&is_available[0]=PRODUCT_AVAIBILITY[0 or 1]&recommended_by=dynamic&recommended_code=UNIQUE_RECOMMENDER_CODE'

#Short request with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=view&shop_id=SHOP_ID&did=DEVICE_ID&item_id[0]=PRODUCT_ID'
```

```javascript

// Simple track
<%= config[:js_sdk_name] %>("track", "view", {
    id: 37,
    stock: true
});

// Also notify the product is in stock (if it was not in stock)
<%= config[:js_sdk_name] %>("track", "view", {
    id: 37,
    stock: true
});

// Or not in stock now (to prevent recommending it on the next requests)
<%= config[:js_sdk_name] %>("track", "view", {
    id: 37,
    stock: false
});

// Track if product was viewed after click on product recommendations
<%= config[:js_sdk_name] %>("track", "view", {
    id: 37,
    recommended_by: "dynamic",
    recommender_code: "jkIWdXSRfwVyK"
});

// Track if product was viewed after click on suggest results
<%= config[:js_sdk_name] %>("track", "view", {
    id: 37,
    recommended_by: "instant_search"
});

// ... or on full results
<%= config[:js_sdk_name] %>("track", "view", {
    id: 37,
    recommended_by: "full_search"
});

```

```swift
// Plain tracking
sdk.track(event: .productView(id: "PRODUCT_ID")) { trackResponse in
    print("Product viewed callback")
    switch trackResponse {
    case let .success(response):
        print("Successful")
    case let .failure(error):
        switch error {
        case .custom(let customError):
            print("Error: ", customError)
        default:
            print("Error: ", error.localizedDescription)
        }
        fatalError("Task failed successfully")
    }
}


// Tracking after product recommendation click
let recData = RecomendedBy(type: .dynamic, code: "beb620922934b6ba2d6a3fb82b8b3271")
sdk.track(event: .productView(id: "PRODUCT_ID"), recommendedBy: recData) { trackResponse in
    // ...
}
```

Send this event when user opens product's details page.

### JS SDK syntax
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "view", {params});|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ----------- |
|id|number/string|required|The ID of the product being viewed|
|stock|boolean|optional|Product availability. If defined, it overwrites the value received from the product feed (XML) and HTTP-import of the product catalog.|
|recommended_by|string|required in some cases|If a product from a recommendation widget was opened in a popup or a website uses a "single page" architecture, this parameter must contain the value "dynamic".|
|recommended_code|string|required in some cases|If a product from the recommendations widget was opened in the pop-up or the site uses a "single page" architecture, this parameter must contain a unique code of the recommendations widget, available in the account in the "data-recommender-code" attribute for each widget.|

## User viewed a category

```shell
#Full request
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=category&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&category_id=CATEGORY_ID'

#Short request with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=category&shop_id=SHOP_ID&did=DEVICE_ID&category_id=CATEGORY_ID'
```

```javascript
<%= config[:js_sdk_name] %>("track", "category", 100500);
```

```swift
sdk.track(event: .categoryView(id: "CATEGORY_ID")) { trackResponse in
    // ... see product viewed event for details about a callback
}
```

Send this event when user opens category page.

### JS SDK syntax
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "category", category_id);|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ----------- |
|category_id|number/string|required|The ID of the category being viewed|

## User searched something

```shell
#Full request
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=search&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&search_query=URL_ENCODED_SEARCH_QUERY'

#Short request with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=search&shop_id=SHOP_ID&did=DEVICE_ID&search_query=URL_ENCODED_SEARCH_QUERY'
```

```javascript
<%= config[:js_sdk_name] %>('track', 'search', search_query);
```

### JS SDK syntax
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "search", search_query);|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ----------- |
|search_query|string|required|The search query text|

## User added product to cart

```shell
#Full request for a single product without widget recommendation identifiers
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=cart&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID&is_available[0]=PRODUCT_AVAILABILITY[0 or 1]&amount[0]=PRODUCT_QUANTITY'

#Full request for a single product with widget recommendation identifiers
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=cart&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID&is_available[0]=PRODUCT_AVAILABILITY[0 or 1]&amount[0]=PRODUCT_QUANTITY&recommended_by=dynamic&recommended_code=UNIQUE_RECOMMENDER_CODE'

#Short request for a single product with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=cart&shop_id=SHOP_ID&did=DEVICE_ID&item_id[0]=PRODUCT_ID&is_available[0]=PRODUCT_AVAILABILITY[0 or 1]&amount[0]=PRODUCT_QUANTITY'

#Full request to send the full current cart
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=cart&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMEN[A or B]&item_id[0]=1ST_PRODUCT_ID&amount[0]=1ST_PRODUCT_QUANTITY&item_id[1]=2ND_PRODUCT_ID&amount[1]=2ND_PRODUCT_QUANTITY&...&item_id[LAST_INDEX]=LAST_PRODUCT_ID&amount[LAST_INDEX]=LAST_PRODUCT_QUANTITY&full_cart=true'
```

```javascript
//Short request for a single product
<%= config[:js_sdk_name] %>('track', 'cart', id);

//Full request for a single product with widget recommendation identifiers
<%= config[:js_sdk_name] %>('track', 'cart', {
    id: PRODUCT_ID,
    amount: PRODUCT_QUANTITY,
    stock: true,
    recommended_by: 'dynamic',
    recommended_code: 'UNIQUE_RECOMMENDER_CODE'
});

//Full request to send the full current cart
<%= config[:js_sdk_name] %>('track', 'cart', [
    {
        id: FIRST_PRODUCT_ID,
        amount: FIRST_PRODUCT_QUANTITY
    },
    ...
    {
        id: LAST_PRODUCT_ID,
        amount: LAST_PRODUCT_QUANTITY
    }
]);
```

```swift
// Track product added to cart
sdk.track(event: .productAddedToCart(id: "PRODUCT_ID")) { trackResponse in
    // ... see product viewed event for details about a callback
}

// Sync full cart (automatically adds and removes products)
sdk.track(event: .synchronizeCart(ids: ["PRODUCT_ID_1", "PRODUCT_ID_2"])) { trackResponse in
    // ... see product viewed event for details about a callback
}
```

```java
// Not described yet
```

### JS SDK syntax (short request for a single product)
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "cart", id);|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ----------- |
|id|number/string|required|The ID of the product added to the cart|

### JS SDK syntax (full request for a single product)
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "cart", {params});|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ------------ |
|id|number/string|required|The ID of the product added to the cart|
|amount|number|optional|Product quantity|
|stock|boolean|optional|Product availability. If defined, it overwrites the value received from the product feed (XML) and HTTP-import of the product catalog.|
|recommended_by|string|required in some cases|If a product from a recommendation widget was opened in a popup or a website uses a "single page" architecture, this parameter must contain the value "dynamic".|
|recommended_code|string|required in some cases|If a product from the recommendations widget was opened in the pop-up or the site uses a "single page" architecture, this parameter must contain a unique code of the recommendations widget, available in the account in the "data-recommender-code" attribute for each widget.|

### JS SDK syntax (request to send the full current cart)
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "cart", [{params}, ..., {params}]);|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ------------ |
|id|number/string|required|The ID of the product added to the cart|
|amount|number|optional|Product quantity|

## User removed product from cart

```shell
#Full request
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=remove_from_cart&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID'

#Short request for a single product with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=remove_from_cart&shop_id=SHOP_ID&did=gN7WW9zXpM&item_id[0]=PRODUCT_ID'
```

```javascript
//Full request for a single product
<%= config[:js_sdk_name] %>('track', 'remove_from_cart', id);
```

```swift
sdk.track(event: .productRemovedFromCart(id: "PRODUCT_ID")) { trackResponse in
    // ... see product viewed event for details about a callback
}
```

```java
// Not described yet
```

### JS SDK syntax (full request for a single product)
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "remove_from_cart", id);|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ------------ |
|id|number/string|required|The ID of the product removed from the cart|


## User purchased products

```shell
#Full request
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=purchase&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&order_id=ORDER_NUMBER&order_price=TOTAL_ORDER_PRICE&item_id[0]=1ST_PRODUCT_ID&amount[0]=1ST_PRODUCT_QUANTITY&price[0]=1ST_PRODUCT_PRICE&is_available[0]=1ST_PRODUCT_AVAILABILITY[0 or 1]&item_id[1]=2ND_PRODUCT_ID&amount[1]=2ND_PRODUCT_QUANTITY&price[1]=2ND_PRODUCT_PRICE&is_available[1]=2ND_PRODUCTAVAILABILITY[0 or 1]&...&item_id[LAST_INDEX]=LAST_PRODUCT_ID&amount[LAST_INDEX]=LAST_PRODUCT_QUANTITY&price[LAST_INDEX]=LAST_PRODUCT_PRICE&is_available[LAST_INDEX]=LAST_PRODUCTAVAILABILITY[0 or 1]'

#Short request with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=purchase&shop_id=SHOP_ID&did=DEVICE_ID&item_id[0]=1ST_PRODUCT_ID&amount[0]=1ST_PRODUCT_QUANTITY&item_id[1]=2ND_PRODUCT_ID&amount[1]=2ND_PRODUCT_QUANTITY&...&item_id[LAST_INDEX]=LAST_PRODUCT_ID&amount[LAST_INDEX]=LAST_PRODUCT_QUANTITY'
```
```javascript
//Full request
<%= config[:js_sdk_name] %>('track', 'purchase', {
    products: [
        {id: 37, price: 318, amount: 3, stock: true},
        {id: 187, price: 5000, amount: 1, stock: false}
    ],
    order: 'N318',
    order_price: 29999
});
```


```swift
// Track product added to cart
sdk.track(event: .productAddedToCart(id: "PRODUCT_ID")) { trackResponse in
    // ... see product viewed event for details about a callback
}
```

```java
// Not described yet
```

<aside class="notice">
If you want to debug purchase tracking, keep in mind: if you send event for existing order (by `order_id`), platform doesn't create new events with the same `order_id`. For test purposes, you can use random `order_id` or just omit it (platform will generate fake `order_id`).
</aside>

### JS SDK syntax
|Syntax|
| ------------ |
|<%= config[:js_sdk_name] %>("track", "purchase", {params});|

### JS SDK Parameters
|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ------------ |
|products|array|required|An array of objects with product information in the order. Description of parameters in the table below.|
|order|number/string|optional|Order number in the store. If not defined, the internal order numbering system will be used. In this case synchronization of order status is impossible.|
|promocode|string|optional|Promo code used in transaction.|
|order_price|number|optional|The final cost of the order including all discounts, bonuses, and additional services. If not defined, the cost of the order is calculated from the data in the product database without discounts and additional services.|
|order_cash|number|optional|How much a customer paid with real money.|
|order_bonuses|number|optional|How much a customer paid with bonuses.|
|order_delivery|number|optional|Delivery fee.|
|order_discount|number|optional|Order discount.|
|delivery_type|string|optional|Method of delivery. Available values: "self_pickup", "delivery", "pickup_point"|
|payment_type|string|optional|Payment type. Can by any string value. Ex: cash, card, wire.

Description of parameters in the objects of the "products" array:

|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ------------ |
|id|number/string|required|The ID of the product in the order|
|amount|number|required|Product quantity|
|price|number|optional|Product cost per unit|
|stock|boolean|optional|Product availability. It may be useful when a single product is sold to exclude it from the recommendations at once.|

## User added product to favorites

```shell
# Full request
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=wish&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID'

# Short request with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=wish&shop_id=SHOP_ID&did=DEVICE_ID&item_id[0]=PRODUCT_ID'
```

```javascript
<%= config[:js_sdk_name] %>('track', 'wish', product_id);
```

```java
// Not described yet
```

```swift
sdk.track(event: .orderCreated(orderId: "123", totalValue: 33.3, products: [(id: "PRODUCT_ID_1", amount: 3), (id: "PRODUCT_ID_2", amount: 1)])) { trackResponse in
    // ... see product viewed event for details about a callback
}
```


## User removed product from favorites


```shell
#Full request
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=remove_wish&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&segment=SEGMENT[A or B]&item_id[0]=PRODUCT_ID'

#Short request with minimum required parameters
curl 'http://<%= config[:api_endpoint] %>/push' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=remove_wish&shop_id=SHOP_ID&did=DEVICE_ID&item_id[0]=PRODUCT_ID'
```

```javascript
<%= config[:js_sdk_name] %>('track', 'remove_wish', product_id);
```

```swift
sdk.track(event: .productRemovedToFavorities(id: "PRODUCT_ID")) { trackResponse in
    // ... see product viewed event for details about a callback
}
```

```java
// Not described yet
```


## Track custom event

```shell
# Basic tracking
curl 'http://<%= config[:api_endpoint] %>/push/custom' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=my_event&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID'

# With custom parameters
curl 'http://<%= config[:api_endpoint] %>/push/custom' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'event=my_event&shop_id=SHOP_ID&did=DEVICE_ID&seance=SEANCE_ID&category=EVENT_CATEGORY&label=EVENT_LABEL&value=EVENT_VALUE'
```

```javascript

// Simple tracking
<%= config[:js_sdk_name] %>("track", "my_event");

// Tracking with custom parameters
<%= config[:js_sdk_name] %>("track", "my_event", {
    category: "event category",
    label: "event label",
    value: 100
});
```

```swift
// Not implemented yet
```

```java
// Not implemented yet
```


<aside class="notice">
Before tracking custom events, register it in "Settings > Custom events".
</aside>

Custom event can be tracked in simple mode (just event name) and advanced mode (with 3 optional parameters).

Optional parameters:

|Parameter|Type|Requirement|Description|
| ------------ | ------------ | ------------ | ------------ |
| category | String | optional | Event category |
| label | String | optional | Event label |
| value | Integer | optional | Event value |


## User clicked on mobile push

```shell
curl 'http://<%= config[:api_endpoint] %>/web_push_subscriptions/clicked' \
    -X 'POST' \
    -H 'Content-Type: application/x-www-form-urlencoded' \
    --data-raw 'shop_id=SHOP_ID&code=CODE&type=mobile_push_transactional'

```

```javascript
// No implementation.
```

```swift
sdk.notificationClicked(code: "i7ykuagkjgfs", type: "mobile_push_transactional")
```

```java
// User data
HashMap<String, String> params = new HashMap<>();
params.put("email", "email@example.com");
<%= config[:android_sdk_package_name] %>.profile(params);

//For tracking notification opened
if( getIntent().getExtras() != null ) {
	<%= config[:android_sdk_package_name] %>.notificationClicked(getIntent().getExtras());
}
```

When user clicks on mobile push notification in mobile app, you have to send event to API with `code` and `type` parameters.

This method uses separate endpoint:

Endpoint: `POST https://<%= config[:api_endpoint] %>/web_push_subscriptions/clicked`

### Required params

All events require at least these parameters:

Parameter | Type | Required | Description
--------- | ------- | -------  | -----------
shop_id | String | true | Your API key
code | String | true | Message identifier. Value can be taken from push's JSON payload. For Android it's located in `id` property. In iOS SDK it's `src.id`
type | String | true | Message type. Value can be taken from push's JSON payload. For Android it's located in `type` property. In iOS SDK it's `src.type`

