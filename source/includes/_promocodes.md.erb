# Promo codes

Service provides endpoints for promo codes management.


## List of promo codes lists

```shell
curl https://<%= config[:api_endpoint] %>/promo_codes?shop_id=SHOPID&shop_secret=SHOP_SECRET
```

> The above command returns JSON structured like this:

```json
[
  {
    "id": 3184,
    "name": "Abandoned cart trigger discount codes",
    "available": 3744
  }
]
```

This method returns list of existing promo codes lists with count of available promo codes in each list.

### HTTP Request

`GET https://<%= config[:api_endpoint] %>/promo_codes`

### Query Parameters

| Parameter   | Required  | Type    | Description                                                                  |
|-------------|-----------|---------|------------------------------------------------------------------------------|
| shop_id     | true      | string  | Your API key                                                                 |
| shop_secret | true      | string  | Your API secret key                                                          |
| active      | false     | integer | Return only lists with at least 1 free code (value `1`)                      |
| exclude     | false     | string  | Comma separated list of IDs of lists to exclude                              |
| include     | false     | string  | Comma separated list of IDs of lists to include in result (excludes others)  |
| offset      | false     | integer | Offset for pagination. Default: `0`                                          |
| limit       | false     | integer | Limit for pagination. Default: `1000`                                        |


### Errors

When promo secret key is wrong, method returns 403 error.




## Upload promo codes

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id": "...",
    "shop_secret": "...",
    "id": "...",
    "codes": [ "code1", "code2", "code3" ]
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request POST \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/promo_codes
```

Method uploads list of unique promo codes to the selected list. All non-unique promo codes will be excluded.


### HTTP Request

`POST https://<%= config[:api_endpoint] %>/promo_codes`

`Content-Type: application/json`

### Query Parameters

| Parameter    | Required  | Description         |
|--------------|-----------|---------------------|
| shop_id      | true      | Your API key        |
| shop_secret  | true      | Your API secret key |
| id           | true      | Promo codes list ID |
| codes        | true      | List of promo codes |





## Delete not sent promo codes

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id": "...",
    "shop_secret": "...",
    "id": "...",
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request DELETE \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/promo_codes/purge
```

Method deletes promo codes from the list which were not sent to any user. It's useful to clean up time sensitive codes.


### HTTP Request

`DELETE https://<%= config[:api_endpoint] %>/promo_codes/purge`

`Content-Type: application/json`

### Query Parameters

| Parameter    | Required  | Description         |
|--------------|-----------|---------------------|
| shop_id      | true      | Your API key        |
| shop_secret  | true      | Your API secret key |
| id           | true      | Promo codes list ID |

### Errors

When promo codes list is not found, method returns 404 error.






## Fetch promo code

```shell
curl https://<%= config[:api_endpoint] %>/promo_codes/fetch?did=DEVICE_ID&shop_id=SHOPID&id=PROMOCODE_LIST_ID
```

```javascript
<%= config[:js_sdk_name] %>("get_promo_code", {id: PROMOCODE_LIST_ID}, success_callback, error_callback);
```

> The above command returns JSON structured like this:

```json
{"code":  "UNIQUE_CODE"}
```

Method provides service for unique promo codes fetching.

Note: unique promo codes are limited. Store fetched promo code during user's session.


### HTTP Request

`GET https://<%= config[:api_endpoint] %>/promo_codes/fetch`

### Query Parameters

| Parameter | Required | Description                                      |
|-----------|----------|--------------------------------------------------|
| did       | true     | Device ID. You get it from `init` method in SDK. |
| shop_id   | true     | Your API key                                     |
| id        | true     | Promo codes list ID                              |
| sid       | false    | Temporary user session ID                        |

### Errors

When promo codes list is empty, method returns 404 error.

## Delete promocodes

```shell
curl --header "Content-Type: application/json"
  --request DELETE
  --data '{
    "shop_id": "SHOP_ID",
    "shop_secret": "SHOP_SECRET",
    "promo_code_list_id": "1",
    "codes": ["code1", "code2"]
  }'
  https://<%= config[:api_endpoint] %>/promo_codes/delete


```

```javascript
// Not implemented
```

```swift
// Not implemented
```

```kotlin
// Not implemented
```

```java
// Not implemented
```

```jsx
// Not implemented
```

`DELETE https://<%= config[:api_endpoint] %>/promo_codes/delete`

### Query Parameters

| Parameter          | Type   | Required | Description                     |
|--------------------|--------|----------|---------------------------------|
| promo_code_list_Id | String | true     | Id of the list with promo codes |
| codes              | Array  | true     | An array with promo codes       |

### Response parameters

| Parameter       | Type    | Description                               |
|-----------------|---------|-------------------------------------------|
| delete_count    | Integer | Number of deleted promo codes             |
| not_found_count | Integer | Number of promo codes that were not found |
