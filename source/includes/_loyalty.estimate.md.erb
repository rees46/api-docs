## Estimate discounts

> Headers

```
Content-type: application/json
```

> Body example

```json
{
    "shop_id":        "...",
    "shop_secret":    "...",
    "identifier":     "...",
    "payment_type":   "...",
    "charge_bonuses": true,
    "cart_items": [
      {"product_id": "...", "price": 1000, "quantity": 4},
      {"product_id": "...", "price": 2000, "quantity": 1}
    ]
}
```

> Request example

```shell
curl --header "Content-Type: application/json" \
  --request POST \
  --data-binary "@data.json" \
  https://<%= config[:api_endpoint] %>/loyalty/checkout/estimate
```

```javascript
// S2S only
```
```swift
// S2S only
```
```java
// S2S only
```
```kotlin
// S2S only
```
```jsx
// S2S only
```

> The above command returns JSON structured like this:

```json
{
  "success": true,
  "payload": {
    "order_id": null,
    "identifier": "...",
    "payment_type": "...",
    "order_total": 6000,
    "order_discount": 1000,
    "order_to_pay": 5000,
    "order_bonuses_to_charge": 500,
    "items": [
      {
        "product_id": "...",
        "quantity": 4,
        "price": 1000,
        "total": 4000,
        "discountable": true,
        "bonusable": true,
        "rewardable": true,
        "paid_with_offers": 0,
        "paid_with_discounts": 500,
        "paid_with_bonuses": 500,
        "bonuses_used": 500,
        "bonuses_used_per_product": 125,
        "total_after_discounts": 3500,
      },
      ...
    ]
  }
}
```

### HTTP Request

`POST https://<%= config[:api_endpoint] %>/loyalty/checkout/estimate`

Method estimates discounts and bonuses usage for the shopping cart.

This is the first operation in the checkout process. POS or website sends this request with the client's shopping cart and receives calculated order value with discounts. This operation doesn't charge for bonuses and can be requested several times safely.

If `charge_bonuses` is missing or `false`, only offers and discounts will be applied. Bonuses will not be calculated.

When clients proceed to the payment step, execute the next method `apply` to charge for bonuses and get the final payment value.

