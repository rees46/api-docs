# User's profile

Endpoints are used to work with user's profile.

## Save profile settings

```shell
curl -d "shop_id=SHOPID&shop_secret=SHOP_SECRET&email=EMAIL&fieldname=FIELDVALUE" https://<%= config[:api_endpoint] %>/profile/set
```

```javascript
<%= config[:js_sdk_name] %>('profile', 'set', {
    "email": "test@example.com",
    "id": "123456789",
    "loyalty_id": "987654321",
    "phone": "19991005000",
    "first_name": "Jane",
    "last_name": "Smith",
    "location": "sdsdfsdfsdf",
    "kids": [
        {"gender": "m", "birthday": "2017-06-04"},
        {"gender": "f", "birthday": "2014-02-10"},
        {"gender": "m", "birthday": "2014-03-17"}
    ]
});
```

```javascript
//An example of using custom fields by type
<%= config[:js_sdk_name] %>('profile', 'set', {
    "string": "sdsdfsdfsdf",
    "int": 123,
    "float": 123.12,
    "list_element": ["first", "second"],
    "json": {"key": "val", "key2": "val2"},
    "date": "2022-08-26"
});
```

```swift
// The iOS SDK profile can work with any type of array, as well as with objects.
sdk.setProfileData(
  userEmail: "YOUR_EMAIL",
  userPhone: "YOUR_PHONE",
  userLoyaltyId: "YOUR_LOYALTY_ID",
  birthday: Date(),
  age: 30,
  firstName: "YOUR_NAME",
  lastName: "YOUR_LAST_NAME",
  location: "YOUR_LOCATION",
  gender: .male,
  fbID: "YOUR_FB_ID",
  vkID: "YOUR_VK_ID",
  telegramId: "YOUR_TG_ID",
  loyaltyCardLocation: "LOYALTY_CARD_LOCATION",
  loyaltyStatus: "LOYALTY_SATUS",
  loyaltyBonuses: 100,
  loyaltyBonusesToNextLevel: 200,
  boughtSomething: true,
  userId: "YOUR_USER_ID",
  customProperties: customProperties
)

// Examples of arrays
let stringArray = ["item1", "item2", "item3"]
let intArray = [1, 2, 3, 4, 5]
let floatArray: [Float] = [1.1, 2.2, 3.3]
let boolArray = [true, false, true]
let dateArray = [Date(),Date(),Date()]

// Object example
let object: [String: Any] = [
  "stringKey": "stringValue",
  "intKey": 123,
  "floatKey": 45.67,
  "boolKey": true,
  "dateKey": Date(),
  "arrayKey": [1, 2, 3],
  "nestedObjectKey": [
  "nestedStringKey": "nestedValue",
  "nestedIntKey": 456
  ]
]

// Custom properties example
let customProperties: [String: Any] = [
  "stringArray": stringArray,
  "intArray": intArray,
  "floatArray": floatArray,
  "boolArray": boolArray,
  "dateArray": dateArray,
  "customObject": object
]
```

```kotlin
/**
 * Initializes arrays of basic data types.
 * These arrays demonstrate that profile properties can support arrays of strings, integers, floats, booleans, and dates.
 */

val stringArray = arrayOf("item1", "item2", "item3")
val intArray = arrayOf(1, 2, 3, 4, 5)
val floatArray = arrayOf(1.1f, 2.2f, 3.3f)
val boolArray = arrayOf(true, false, true)
val dateArray = arrayOf(Date(), Date(), Date())

/**
 * Creates a nested JSON object.
 * This object demonstrates how to structure complex data with key-value pairs, including strings and integers.
 */

val nestedObject = JSONObject().apply {
  put("nestedStringKey", "nestedValue")
  put("nestedIntKey", 456)
}

/**
 * Creates a custom JSON object.
 * The object includes various data types such as strings, integers, floats, booleans, dates, arrays,
 * and even another nested JSON object.
 */

val customObject = JSONObject().apply {
  put("stringKey", "stringValue")
  put("intKey", 123)
  put("floatKey", 45.67f)
  put("boolKey", true)
  put("dateKey", Date())
  put("arrayKey", JSONArray(arrayOf(1, 2, 3)))
  put("nestedObjectKey", nestedObject)
}

/**
 * Creates an array of custom JSON objects.
 * This demonstrates how to pass an array of complex objects as a single profile property.
 */

val customObjectArray = arrayOf(customObject, customObject)

/**
 * Builds the ProfileParams object using the Builder pattern.
 * This example demonstrates how to add a wide range of user properties,
 * including basic data types, arrays, and custom objects, to be passed to the SDK.
 */

val params = ProfileParams.Builder()
  .put("userEmail", "YOUR_EMAIL")
  .put("userPhone", "YOUR_PHONE")
  .put("userLoyaltyId", "YOUR_LOYALTY_ID")
  .put("birthday", Date())
  .put("age", 30)
  .put("firstName", "YOUR_NAME")
  .put("lastName", "YOUR_LAST_NAME")
  .put("location", "YOUR_LOCATION")
  .put("gender", "male")
  .put("fbID", "YOUR_FB_ID")
  .put("vkID", "YOUR_VK_ID")
  .put("telegramId", "YOUR_TG_ID")
  .put("loyaltyCardLocation", "LOYALTY_CARD_LOCATION")
  .put("loyaltyStatus", "LOYALTY_STATUS")
  .put("loyaltyBonuses", 100)
  .put("loyaltyBonusesToNextLevel", 200)
  .put("boughtSomething", true)
  .put("userId", "YOUR_USER_ID")
  .put("stringArray", stringArray)
  .put("intArray", intArray)
  .put("floatArray", floatArray)
  .put("boolArray", boolArray)
  .put("dateArray", dateArray)
  .put("customObject", customObject)
  .put("customObjectArray", customObjectArray)

/**
 * Calls the SDK's profile method to save user profile data.
 * A callback is included to handle success or failure of the API call.
 */

sdk.profile(params, object : OnApiCallbackListener() {
  override fun onSuccess(response: JSONObject?) {
    Log.i(TAG, "Response: $response") // Logs the API response
  }
})

```


```java
  HashMap<String, String> params = new HashMap<>();
  params.put("email", "email@example.com");
  <%= config[:android_sdk_package_name]%>.profile(params);
  //With callback
  <%= config[:android_sdk_package_name]%>.profile(params, new Api.OnApiCallbackListener() {
      @Override
      public void onSuccess(JSONObject response) {
          Log.i(TAG, "Response: " + response.toString());
      }
  });
```

```jsx
const params = {
  id: 100500,
  email: "john.doe@examplemail.com",
  phone: "4400114527199",
  first_name: "John",
  last_name: "Doe",
  birthday: "1990-03-11",
  age: 31,
  gender: "m",
  location: "NY",
  bought_something: true,
  loyalty_id: "000001234567",
  loyalty_card_location: "NY",
  loyalty_status: "5% discount",
  loyalty_bonuses: 1123,
  loyalty_bonuses_to_next_level: 1877,
  fb_id: "000000000354677",
  vk_id: "vk031845",
  telegram_id: "0125762968357835",
  kids: [
    {gender: "m", birthday: "2001-04-12"},
    {gender: "f", birthday: "2015-07-28"}
  ],
  auto: [
    {brand: "Nissan", model: "Qashqai", vds: "TM7N243E4G0BJG978"}
  ]
};

sdk.setProfile(params);
```

This method overrides profile's settings.

### Query Parameters

| Parameter   | Type   | Required   | Description         |
|-------------|--------|------------|---------------------|
| shop_id     | String | true       | Your API key        |
| shop_secret | String | true       | Your API secret key |
| did*        | String | true       | Device ID           |
| email*      | String | true       | User's email        |
| phone*      | String | true       | User's phone number |

<aside class="notice">
At least of identifiers (marked by *) must present in request: did, email or phone. It's used to identify user.
</aside>

<aside class="notice">
If `did` is present, `shop_secret` is not needed.
</aside>


### Default properties

You can update any standard profile property. All standard properties are listed here:

| Parameter                     | Type    | Description                                      |
|-------------------------------|---------|--------------------------------------------------|
| loyalty_id                    | String  | User's loyalty program ID                        |
| id                            | String  | User ID in your platform                         |
| fb_id                         | String  | User's Facebook ID                               |
| vk_id                         | String  | User's VK ID                                     |
| telegram_id                   | String  | User's Telegram ID                               |
| loyalty_card_location         | String  | Location ID where user's loyalty card was issued |
| loyalty_status                | String  | User's loyalty program status                    |
| loyalty_bonuses               | Integer | User's bonuses amount                            |
| loyalty_bonuses_to_next_level | Integer | User's bonuses amount left for the next level    |
| gender                        | String  | User's gender: `m` or `f`                        |
| location                      | String  | User's location code                             |
| first_name                    | String  | User's first name                                |
| last_name                     | String  | User's last name                                 |
| age                           | Integer | User's age in years                              |
| birthday                      | Date    | User's birthday in SQL format: YYYY-MM-DD        |
| bought_something              | Bool    | User bought something ever                       |
| kids                          | Array   | List of kids (see below)                         |
| auto                          | Array   | List of auto vehicles (see below)                |
| google_advertising_id         | String  | Google advertising ID                            |
| apple_advertising_id          | String  | Apple advertising ID                             |
| yandex_id                     | String  | Yandex advertising ID                            |


Kid object properties:

| Parameter  | Type   | Description                              |
|------------|--------|------------------------------------------|
| gender     | String | Kid's gender: `m` or `f`                 |
| birthday   | Date   | Kid's birthday in SQL format: YYYY-MM-DD |

Auto object properties:

| Parameter  | Type   | Description            |
|------------|--------|------------------------|
| brand      | String | Vehicle brand          |
| model      | String | Vehicle model          |
| vds        | String | Vehicle VDS/VIN number |

### Custom properties

Additionally, you can update any custom property, you've created in CRM.



## Read profile info

```shell
# Using email as user identifier
curl https://<%= config[:api_endpoint] %>/profile?email=...&shop_id=...&shop_secret=...

# Using phone as user identifier
curl https://<%= config[:api_endpoint] %>/profile?phone=...&shop_id=...&shop_secret=...
```

```javascript
<%= config[:js_sdk_name] %>('profile', 'get', function(profile) {
    // Here you can use all properties of profile's object
    console.log(profile.gender);
    console.log(profile.fashion.sizes.shoe);
},
// Use `true`, to work in single page sites.
// Default - `false`
false
);
```

> The REST method returns this JSON structure for requests where a secret key was provided

```json
{
  "first_name": "...",
  "last_name": "...",
  "email": "...",
  "phone": "...",
  "fb_id": "...",
  "vk_id": "...",
  "telegram_id": "...",
  "loyalty_id": "...",
  "loyalty_card_location": "...",
  "loyalty_status": "...",
  "loyalty_bonuses": "...",
  "loyalty_bonuses_to_next_level": "...",
  "gender": "...",
  "location": "...",
  "age": "...",
  "birthday": "...",
  "bought_something": "...",
  "tags": [
    "...",
    "..."
  ],
  "custom_properties": {
    "prop_key_1": "prop_value",
    "prop_key_2": "prop_value"
  },
  "additional_phones": [],
  "additional_emails": [],
  "additional_loyalty_ids": [],
  "orders": [
    {
      "id": "...",
      "value": "...",
      "status": "...",
      "items": [
        {
          "id": "...",
          "price": "...",
          "name": "...",
          "quantity": "..."
        },
        {
          "id": "...",
          "price": "...",
          "name": "...",
          "quantity": "..."
        }
      ]
    }
  ]
}
```

> The REST method returns this JSON structure with publicly available profile data if a secret key was not provided in the request

```json
{
  "has_email": true,
  "computed_gender": "male",
  "gender": "male",
  "bought_something": true,
  "id": "YOUR ID",
  "custom_properties": {
    "favorite_color": "blue",
    "subscription_level": "premium"
  }
}
```

> JS SDK method returns simplified anonymous structure to prevent data stealing

```json
{
  "fashion_sizes": ["..."],

  "gender": "m or f",

  "cosmetic_hair": ["..."],
  "allergy": "bool",
  "cosmetic_skin": ["..."],
  "cosmetic_perfume": ["..."],

  "compatibility": null,
  "vds": null,

  "jewelry": null,

  "realty": ["..."],

  "children": ["..."],
  "child_gender": "m or f",

  "pets": ["..."],

  "income_level": "cheap"
}
```


You can read profile info from the CRM using an API or SDK.

In the case of using the REST API (when using an email or phone number as the user ID), you must provide a secret key to the method to get a full response.

However, there is publicly available data you can retrieve without providing a secret key in your request.


## Force change email

```shell
curl -d "shop_id=SHOPID&shop_secret=SHOP_SECRET&new_email=NEW_EMAIL&old_email=OLD_EMAIL" https://<%= config[:api_endpoint] %>/profile/force_change_email
```

```javascript
// Not supported
```

```swift
// Not supported
```

```kotlin
// Not supported
```

```java
// Not supported
```

```jsx
// Not supported
```

Force change email of user with `old_email` to `new_email`. If a user with `new_email` exists, removes email from that user.

If user with `old_email` is not found, returns 404.

<aside class="notice">
Use it carefully, because wrong usage of this method can lose old profile data. Mass uncontrolled action can break everything.
</aside>

It's S2S method.

### Query Parameters

| Parameter                    | Type   | Required   | Description                                                                                                  |
|------------------------------|--------|------------|--------------------------------------------------------------------------------------------------------------|
| shop_id                      | String | true       | Your API key                                                                                                 |
| shop_secret                  | String | true       | Your API secret key                                                                                          |
| new_email                    | String | true       | User's new email                                                                                             |
| old_email                    | String | true       | User's current email                                                                                         |
| i_understand_what_i_am_doing | String | true       | Must present with any `true` value (`true`, `"true"`, `1`, `yes`, `believe me I know what I am doing`, etc). |


## Force change phone

```shell
curl -d "shop_id=SHOPID&shop_secret=SHOP_SECRET&new_phone=NEW_PHONE&old_phone=OLD_PHONE" https://<%= config[:api_endpoint] %>/profile/force_change_phone
```

```javascript
// Not supported
```

```swift
// Not supported
```

```kotlin
// Not supported
```

```java
// Not supported
```

```jsx
// Not supported
```

Force change phone of user with `old_phone` to `new_phone`. If a user with `new_phone` exists, removes phone from that user.

If user with `old_phone` is not found, returns 404.

<aside class="notice">
Use it carefully, because wrong usage of this method can lose old profile data. Mass uncontrolled action can break everything.
</aside>

It's S2S method.

### Query Parameters

| Parameter                    | Type   | Required | Description                                                                                                  |
|------------------------------|--------|----------|--------------------------------------------------------------------------------------------------------------|
| shop_id                      | String | true     | Your API key                                                                                                 |
| shop_secret                  | String | true     | Your API secret key                                                                                          |
| new_phone                    | String | true     | User's new phone                                                                                             |
| old_phone                    | String | true     | User's current phone                                                                                         |
| i_understand_what_i_am_doing | String | true     | Must present with any `true` value (`true`, `"true"`, `1`, `yes`, `believe me I know what I am doing`, etc). |





## Purge profile

```shell
# By phone number
curl --location --request DELETE 'https://<%= config[:api_endpoint] %>/profile/purge' \
--header 'Content-Type: application/json' \
--header 'Cookie: did=7Hvlb6ftsK; r46_debug=true' \
--data '{
    "shop_id": "...",
    "shop_secret": "...",
    "phone": "..."
}'

# By phone
curl --location --request DELETE 'https://<%= config[:api_endpoint] %>/profile/purge' \
--header 'Content-Type: application/json' \
--header 'Cookie: did=7Hvlb6ftsK; r46_debug=true' \
--data '{
    "shop_id": "...",
    "shop_secret": "...",
    "email": "..."
}'
```

```javascript
// Not supported
```

```swift
// Not supported
```

```kotlin
// Not supported
```

```java
// Not supported
```

```jsx
// Not supported
```

Remove all personal data by `phone`, `email`, `loyalty_id` or `external_id`:

- phone;
- email;
- first_name;
- last_name;
- middle_name;
- loyalty_id;
- external_id;
- custom client properties

It's S2S method.

### Query Parameters

| Parameter   | Type   | Required | Description         |
|-------------|--------|----------|---------------------|
| shop_id     | String | true     | Your API key        |
| shop_secret | String | true     | Your API secret key |
| phone       | String | true     | User's phone        |
| email       | String | true     | User's email        |
| loyalty_id  | String | true     | User's loyalty_id   |
| external_id | String | true     | User's external_id  |


