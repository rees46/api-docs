# Sending mobile push notifications

```jsx
// Simple init
sdk.initPush();

//onClick listener
sdk.initPush(onClickCallback);

// onReceivetive listener
sdk.initPush(false, onReceiveCallback);

// you can use different callback for notification, when app is in background.
sdk.initPush(false, onReceiveCallback, onBackgroundReceiveCallback);

// If onBackgroundReceiveCallback not specified, used onReceiveCallback listener.

// onClickCallback params
{
  "bigPictureUrl": "MESSAGE_IMAGE",
  "channelId": "personaclick-push",
  "data": {
    "id": "MESSAGE_ID",
    "type": "MESSAGE_TYPE"
  },
  "foreground": true,
  "id": "MESSAGE_ID",
  "largeIconUrl": "MESSAGE_ICON",
  "message": "MESSAGE_BODY",
  "title": "MESSAGE_TITLE",
  "userInteraction": true
}
// onReceiveCallBack, onBackgroundReceiveCallback params
{
  "data": {
    "action_urls": "[]",
    "actions": "[]",
    "body": "MESSAGE_BODY",
    "icon": "MESSAGE_ICON",
    "id": "MESSAGE_ID",
    "image": "MESSAGE_IMAGE",
    "title": "MESSAGE_TITLE",
    "type": "MESSAGE_TYPE"
  },
  "from": "MESSAGE_FROM",
  "messageId": "FMC_MESSAGE_ID",
  "sentTime": TIMESTAMP,
  "ttl": TTL_VALUE
}
```
## Adding Push Notification Permissions

```kotlin

/**
To enable push notifications on Android, add the following permissions to your AndroidManifest.xml file
*/

<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
<uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />

/**
Additionally, ensure that the Firebase messaging service is declared in the manifest
*/

<service android:name="com.google.firebase.messaging.FirebaseMessagingService" android:exported="true">
  <intent-filter>
    <action android:name="com.google.firebase.MESSAGING_EVENT" />
  </intent-filter>
</service>

```

```swift

/**
To configure push notifications for iOS:

1. Enable the Push Notifications capability in your Xcode project under the Signing & Capabilities tab.
2. Register for push notifications in your AppDelegate.swift file. Example below.

*/

import UserNotifications
import Firebase

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
  func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    UNUserNotificationCenter.current().delegate = self
    application.registerForRemoteNotifications()
    FirebaseApp.configure()
    return true
  }
}

```

## Default payload structure

> Example for iOS

```json
{
  "id": "sample_id",
  "title": "Sample Title",
  "body": "Sample body content for the notification.",
  "icon": "YOUR_IMAGE",
  "type": "sample_type",
  "actions": [
    {
      "action": "open_app",
      "title": "Open Application"
    },
    {
      "action": "view_details",
      "title": "View Details"
    }
  ],
  "actionUrls": [
    "ACTION_URL/action1",
    "ACTION_URL/action2"
  ],
  "image": "YOUR_IMAGE",
  "event": {
    "type": "web",
    "uri": "URI/event",
    "payload": {
      "campaignId": "campaign_sample",
      "userSegment": "segment_sample"
    }
  },
  "recipient": {
    "userId": "user_sample_id",
    "deviceToken": "sample_device_token"
  },
  "priority": "high",
  "timestamp": "CURRENT_TIMESTAMP"
}
```

> Example for Android

```json
{
  "id": "sample_id",
  "title": "Sample Title",
  "body": "Sample body content for the notification.",
  "icon": "YOUR_IMAGE",
  "type": "sample_type",
  "actions": [
    {
      "action": "open_app",
      "title": "Open Application"
    },
    {
      "action": "view_details",
      "title": "View Details"
    }
  ],
  "actionUrls": [
    "ACTION_URL/action1",
    "ACTION_URL/action2"
  ],
  "image": "YOUR_IMAGE",
  "event": {
    "type": "web",
    "uri": "URI/event",
    "payload": {
      "campaignId": "campaign_sample",
      "userSegment": "segment_sample"
    }
  },
  "recipient": {
    "userId": "user_sample_id",
    "deviceToken": "sample_device_token"
  },
  "priority": "high",
  "timestamp": "CURRENT_TIMESTAMP"
}
```

> Android request example with analytics_label parameter

```json
{
  "to": "string",
  "notification": {
    "title": "Analitics message",
    "body": "message contains analitytics label",
    "sound": "default"
  },
  "data": {
    "analytics_label": "example analytics label"
  }
}
```

| Parameter           | Required | Description                                                                                                                                                        |
|---------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| aps.alert.title     | true     | The title of the notification. Apple Watch displays this string in the short look notification interface. Specify a string that is quickly understood by the user. |
| aps.alert.subtitle  | true     | Additional information that explains the purpose of the notification.                                                                                              |
| aps.alert.body      | true     | The content of the alert message.                                                                                                                                  |
| aps.alert.badge     | true     | The number to display in a badge on your appâ€™s icon. Specify 0 to remove the current badge, if any.                                                                |
| aps.mutable-content | true     | Always `1` for iOS.                                                                                                                                                |
| image_url           | false    | Link to image/icon.                                                                                                                                                |
| event               | false    | Optional object with additional data.                                                                                                                              |
| event.type          | true     | Type of the notification: `web`, `category`, `product`, `custom`.                                                                                                  |
| event.uri           | true     | Resource identificator depending on the type of event. See examples below.                                                                                         |
| src                 | true     | Information about a campaign (source of the message).                                                                                                              |
| src.type            | true     | Type of a campaign: `bulk`, `chain`, `transactional`.                                                                                                              |
| src.id              | true     | Type of a campaign. String.                                                                                                                                        |
| analytics_label     | true     | It's value is equals message                                                                                                                                       |

<aside class="notice">
If `src` section is present, each tracked event must be populated with this data to track campaign's efficiency.
</aside>

## Basic message

> For iOS

```json
{
  "aps": {
    "alert": {
      "title": "Welcome aboard!",
      "subtitle": "Greeting message.",
      "body": "Hey, it's nice to know you're with us now. Check new updates in our application.",
      "badge": 1
    },
    "mutable-content": 1
  },
  "image_url": "...",
  "src": {
    "type": "bulk",
    "id": "33631"
  }
}
```

> For Android

```json
{
  "title": "Welcome aboard!",
  "body": "Hey, it's nice to know you're with us now. Check new updates in our application.",
  "icon": "...",
  "type": "bulk",
  "id": "33631"
}
```

This kind of message can be used to attract attention and open home screen of the application.

## Open web link

> For iOS

```json
{
  "aps": {
    "alert": {
      "title": "Only today",
      "subtitle": "Special Offer",
      "body": "This special offer for Dyson products only for you!",
      "badge": 1
    },
    "mutable-content": 1
  },
  "image_url": "...",
  "event": {
    "type": "web",
    "uri": "https://example.com/landing/promo"
  },
  "src": {
    "type": "bulk",
    "id": "XFMjM4VAF4"
  }
}
```

> For Android

```json
{
  "title": "Only today",
  "body": "This special offer for Dyson products only for you!",
  "icon": "...",
  "type": "bulk",
  "id": "XFMjM4VAF4",
  "event": "{\"type\": \"web\", \"uri\": \"https://example.com/landing/promo\"}"
}
```


Usually used for promo campaigns when final action is to open some URL in web view.

## Open category

> For iOS

```json
{
  "aps": {
    "alert": {
      "title": "Black Friday!",
      "subtitle": "Discount",
      "body": "Check our big sale from this category",
      "badge": 1
    },
    "mutable-content": 1
  },
  "image_url": "...",
  "event": {
    "type": "category",
    "uri": "BFRIDAY_CATEGORY_ID"
  },
  "src": {
    "type": "chain",
    "id": "72CONd54uF"
  }
}
```

> For Android

```json
{
  "title": "Black Friday!",
  "body": "Check our big sale from this category",
  "icon": "...",
  "type": "chain",
  "id": "72CONd54uF",
  "event": "{\"type\": \"category\", \"uri\": \"BFRIDAY_CATEGORY_ID\"}"
}
```

Suitable to open specific category by it's ID. For example for bulk messages about discounts.

## Open product

> For iOS

```json
{
  "aps": {
    "alert": {
      "title": "...",
      "subtitle": "...",
      "body": "...",
      "badge": 1
    },
    "mutable-content": 1
  },
  "image_url": "...",
  "event": {
    "type": "product",
    "uri": "PRODUCT123"
  },
  "src": {
    "type": "chain",
    "id": "ugLxQ7KrnL"
  }
}
```

> For Android

```json
{
  "title": "...",
  "body": "...",
  "icon": "...",
  "type": "chain",
  "id": "ugLxQ7KrnL",
  "event": "{\"type\": \"product\", \"uri\": \"PRODUCT123\"}"
}
```

Suitable to open specific product by it's ID. For example for triggered messages.

## Open custom page

> For iOS

```json
{
  "aps": {
    "alert": {
      "title": "...",
      "subtitle": "...",
      "body": "...",
      "badge": 1
    },
    "mutable-content": 1
  },
  "image_url": "...",
  "event": {
    "type": "custom",
    "uri": "order/status/36",
    "payload": {}
  },
  "src": {
    "type": "transactional",
    "id": "order_delivered"
  }
}
```

> For Android

```json
{
  "title": "...",
  "body": "...",
  "type": "transactional",
  "id": "order_delivered",
  "event": "{\"type\": \"custom\", \"uri\": \"order/status/36\", \"payload\": {}}"
}
```

Can be used to open any resource by custom data. For example for transactional messages to show order status.

## Handling Push Notifications

```kotlin

/**
You can use the following code to listten for incoming notifications and their payload extraction
*/

sdk.setOnMessageListener(
  listener = { data ->
    Log.i(TAG, data.toString())
  }
)

/**
The OnMessageListener interface
*/

fun interface OnMessageListener {
  fun onMessage(data: NotificationData)
}

/**
NotificationData class
*/

data class NotificationData(
  val id: String?,
  val title: String?,
  val body: String?,
  val icon: String?,
  val type: String?,
  val actions: List<NotificationAction>?,
  val actionUrls: List<String>?,
  val image: String?,
  val event: NotificationEvent?
)

data class NotificationAction(
  val action: String,
  val title: String
)

data class NotificationEvent(
  val type: String?,
  val uri: String?,
  val payload: Map<String, Any>? = null
)


```

```swift

/**
In the AppDelegate file, you can handle push notifications using the following delegate methods
*/

extension AppDelegate: UNUserNotificationCenterDelegate {
  func application(
    _ application: UIApplication,
    didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
  ) {
      let tokenParts = deviceToken.map { data in
        String(format: "%02.2hhx", data)
      }
      let token = tokenParts.joined()
      print("Push Token: \(token)")
      }

  func userNotificationCenter(
    _ center: UNUserNotificationCenter,
    willPresent notification: UNNotification,
    withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
  ) {
      completionHandler([.alert, .badge, .sound])
    }

  func application(
    _ application: UIApplication,
    didReceiveRemoteNotification userInfo: [AnyHashable: Any],
    fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
  ) {
      print("Received Notification: \(userInfo)")
      completionHandler(.newData)
    }
}

/**
You can customize actions for notifications by implementing the NotificationActionsProtocol
*/

extension AppDelegate: NotificationActionsProtocol {
  func openCustom(url: String) {
    print("Open custom URL: \(url)")
  }

  func openCategory(categoryId: String) {
    print("Open category: \(categoryId)")
  }

  func openProduct(productId: String) {
    print("Open product: \(productId)")
  }

  func openWeb(url: String) {
    print("Open web URL: \(url)")
  }
}
```

## Custom push notifications

```shell
No implementation needed
```

```javascript
No implementation needed
```

```swift
No implementation needed
```

```kotlin
// notification object example
{
  "title": "notice",
  "body": "notice text",
  "click_action": "ACTION_VIEW",
  "sound": "default"
}

```

```java
// notification object example
{
  "title": "notice",
  "body": "notice text",
  "click_action": "ACTION_VIEW",
  "sound": "default"
}

```

```jsx
No implementaion needed
```

A custom notification will work if both of the following criteria are met:

The platform checks if attach_notification is enabled.

The second condition is the existence of the android_notification_payload object.

Once these two conditions are satisfied, the notification object will be sent to FCM for delivery to Android devices.

The notification object may include a special parameter for Android called click_action.

An application developer needs to configure click_action inside the AndroidManifest.

To link click_action with a specific activity, the developer must use an intent-filter.

<aside class="warning"> The notification object can be used only for sending notices to Android devices. </aside>





