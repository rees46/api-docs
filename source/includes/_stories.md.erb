# Stories

Section describes how to use Stories

## Show stories block on request

```shell
curl -X GET "https:/<%= config[:api_endpoint] %>/story"
-H "Content-Type: application/json"
-d '{
  "id": "STORY_ID",
  "shop_id": "SHOP_ID",
  "did": "DEVICE_ID"
}
```
```javascript
// The 'start_stories' command is used to start story campaign programmatically (e.g. on button click)
// The second argument is the ID of the stories block.

<%= config[:js_sdk_name] %>('start_stories', 'ID of the stories block')
```
```kotlin
// Show story by id:
sdk.showStory(STORY_ID)

// Programmatic initialization
val storiesView = StoriesView(this, "STORY BLOCK CODE")
findViewById<ViewGroup>(R.id.stories).addView(storiesView)
sdk.initializeStoriesView(storiesView)

// Set item click listener:
val storiesView = findViewById<StoriesView>(R.id.stories_view)
storiesView.itemClickListener = object : OnLinkClickListener {
    override fun onClick(url: String): Boolean {
        // return true if need to opening using the SDK
        return false
    }

    override fun onClick(product: Product): Boolean {
        // return true if need to opening using the SDK
        return false
    }
}
```

 Request path `/story/STORY_ID`

| Request parameters | required     | description     |
|--------------------|--------------|-----------------|
| story_id           | true         | story id        |
| shop_id            | true         | shop id         |
| did                | true         | device id       |



## Font setup

```swift
// Register the font family for Stories block first.
sdk.configuration().stories.registerFont(fileName: "Museo900", fileExtension: FontExtension.ttf.rawValue)
// You can customize font family, font size, colour's, icon size or any other view parameters of the Stories block to suit your app design.
// Each parameter is individual and may not be set - in this case default value's of SDK will be used.
sdk.configuration().stories.setStoriesBlock(fontName: "Museo",
                                            fontSize: 15.0,
                                            textColor: "#5ec169",
                                            textColorDarkMode: "#5ec169",
                                            backgroundColor: "#ffffff",
                                            backgroundColorDarkMode: "#000000",
                                            iconSize: 76,
                                            iconBorderWidth: 2.3,
                                            iconMarginX: 18,
                                            iconMarginBottom: 8,
                                            iconNotViewedBorderColor: "#fd7c50",
                                            iconNotViewedBorderColorDarkMode: "#fd7c50",
                                            iconViewedBorderColor: "#fdc2a1",
                                            iconViewedBorderColorDarkMode: "#fdc2a1",
                                            iconViewedTransparency: 1.0,
                                            iconAnimatedLoaderColor: "#5ec169",
                                            iconPlaceholderColor: "#d6d6d6",
                                            iconPlaceholderColorDarkMode: "#d6d6d6",
                                            iconDisplayFormatSquare: false,
                                            labelWidth: 76,
                                            pinColor: "#fd7c50",
                                            pinColorDarkMode: "#fd7c50",
                                            closeIconColor: "#5ec169")
// Set font family and font size for Default button on Story slide.
// Set font color and background color for Default button on Story slide.
sdk.configuration().stories.setSlideDefaultButton(fontName: "Museo",
                                                  fontSize: 17.0,
                                                  textColor: "#ffffff",
                                                  backgroundColor: "#5ec169",
                                                  textColorDarkMode: "#000000",
                                                  backgroundColorDarkMode: "#ffffff",
                                                  cornerRadius: 5)
// Set font family and font size for Products button on Story slide.
// Set font color and background color for Products button on Story slide.
sdk.configuration().stories.setSlideProductsButton(fontName: "Museo",
                                                   fontSize: 17.0,
                                                   textColor: "#ffffff",
                                                   backgroundColor: "#5ec169",
                                                   textColorDarkMode: "#000000",
                                                   backgroundColorDarkMode: "#ffffff",
                                                   cornerRadius: 5)
// Set the font family for the Products Card detailed view.
sdk.configuration().stories.setProductsCard(fontName: "Museo")
// Set the font family, font size, colour's for Banner with Promocode view.
sdk.configuration().stories.setPromocodeCard(productBannerFontName: "Museo",
                                             productTitleFontSize: 16.0,
                                             productTitleTextColor: "#5ec169",
                                             productTitleTextColorDarkMode: "#5ec169",
                                             productBannerOldPriceSectionFontColor: "#5ec169",
                                             productBannerPriceSectionFontColor: "#5ec169",
                                             productBannerPriceSectionBackgroundColor: "#ffffff",
                                             productBannerPromocodeSectionFontColor: "#ff0000",
                                             productBannerPromocodeSectionBackgroundColor: "#5ec169",
                                             productBannerDiscountSectionBackgroundColor: "#5ec169",
                                             productBannerPromocodeCopyToClipboardMessage: "Copied")
// Setup Stories block autoreload settings.
sdk.configuration().stories.storiesSlideReloadManually = false
sdk.configuration().stories.storiesSlideReloadTimeoutInterval = 10
sdk.configuration().stories.storiesSlideReloadIndicatorDisabled = false
sdk.configuration().stories.storiesSlideReloadIndicatorBackgroundColor = "#ffffff"
sdk.configuration().stories.storiesSlideReloadIndicatorSize = 76.0
sdk.configuration().stories.storiesSlideReloadIndicatorBorderLineWidth = 3
sdk.configuration().stories.storiesSlideReloadIndicatorSegmentCount = 9
sdk.configuration().stories.storiesSlideReloadIndicatorAnimationDuration = 1
sdk.configuration().stories.storiesSlideReloadIndicatorRotationDuration = 17
// Setup Stories Alert popup connection settings.
sdk.configuration().stories.storiesSlideReloadPopupMessageError = "Failed to retrieve data. Please check your connection and try again."
sdk.configuration().stories.storiesSlideReloadPopupMessageFontSize = 17.0
sdk.configuration().stories.storiesSlideReloadPopupMessageFontWeight = .medium
sdk.configuration().stories.storiesSlideReloadPopupMessageDisplayTime = 4
sdk.configuration().stories.storiesSlideReloadPopupPositionY = 120 //default constant
// Setup Stories Stories block text label characters wrapping settings.
sdk.configuration().stories.storiesBlockNumberOfLines = 2
sdk.configuration().stories.storiesBlockCharWrapping = false
sdk.configuration().stories.storiesBlockCharCountWrap = 15

```

```kotlin

// Initialization by adding code into layout
<com.personalizatio.stories.views.StoriesView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:code="STORY BLOCK CODE" />

val storiesView = findViewById<StoriesView>(R.id.stories_view)
sdk.initializeStoriesView(storiesView)


//Font setup
val stories = findViewById<StoriesView>(R.id.story_view)
stories.settings.apply {
    label_font_size = 16
    label_font_family = Typeface.SERIF
    button_font_family = Typeface.MONOSPACE
    products_button_font_family = Typeface.DEFAULT_BOLD
}





```jsx
```
After initializing the SDK, you can set the desired style configuration for the fonts and buttons of the Stories block.

<aside class="notice">
Remember! The use of default parameters in the SDK during initialization takes precedence over the parameters received with the back-end configuration.
</aside>

Before a font can be used, it must be registered with your app.
Add the font file to your xCode project. You must specify a file name with .ttf or .otf extension. Ð¡all the following method after SDK initialization for font registration

## Stories Text Block

```shell
not supported
```

```javascript

```

```swift

// TextBlock is initializing form StoriesElement object and clipsToBounds parameter, it's default value is true
// configurable parameters: textColor,cornerRadius,clipsToBounds,backgroundColor,yOffset

init(from textBlockObject: StoriesElement)

// Define font family names
public struct FontConstants {
    public static let monospaced = "Menlo"
    public static let serif = "Georgia"
    public static let sansSerif = "Arial"
}

// Define layout constants for TextBlockView
public static let leftAnchorOffsetConstant: CGFloat = 5
public static let rightAnchorOffsetConstant: CGFloat = -5
public static let topAnchorOffsetConstant: CGFloat = 2
public static let bottomAnchorOffsetConstant: CGFloat = -2

// Define protocol for text configuration
protocol TBTextConfigurable {
    var text: NSAttributedString { get }
    var textAlignment: NSTextAlignment { get }
}

// Implement TBTextConfigurable protocol
public struct TBTextConfiguration: TBTextConfigurable

// Initialize TBTextConfiguration using StoriesElement
init(from textBlockObject: StoriesElement)

// Initialize TBFontConfiguration using StoriesElement
init(from textBlockObject: StoriesElement)

// Get UIFont based on type, size, bold, and italic properties
private static func getFont(for fontType: FontType, isBold: Bool = false, isItalic: Bool = false, fontSize: CGFloat) -> UIFont

// Define protocol for appearance configuration
protocol TBAppearanceConfigurable {
    var textColor: UIColor { get }
    var cornerRadius: CGFloat { get }
    var clipsToBounds: Bool { get }
    var backgroundColor: UIColor { get }
    var yOffset: CGFloat { get }
}

// Implement TBAppearanceConfigurable protocol
public struct TBAppearanceConfiguration: TBAppearanceConfigurable

// Initialize TBAppearanceConfiguration using StoriesElement
init(from textBlockObject: StoriesElement, clipsToBounds: Bool = true)

// Initialize StoriesElement with JSON dictionary
public init(json: [String: Any])

// Define properties of StoriesElement
public var link: String?
public var deeplinkIos: String?
let uID: String?
let fontType: FontType?
let fontSize: Double?
let textItalic: Bool?
let textBackgroundColorOpacity: String?
let textBackgroundColor: String?
let textColor: String?
let textInput: String?
let textAlignment: TextAlignment?
let textLineSpacing: Double?
let yOffset: Double?
let type: ElementType
let color: String?
let title, linkIos: String?
let textBold: Bool?
let background: String?
let cornerRadius: Int
let labels: Labels?
let products: [StoriesProduct]?
let product: StoriesPromoCodeElement?
```
```kotlin
```


### Available SDK Configuration options

You can use both the font family in the title and its direct name, for example with the "-Regular" suffix.
The color must be transmitted in hex format, for example "#FFFFFFâ.
Any parameter in any method is optional, you can use both together and separately in combination with other parameters.
